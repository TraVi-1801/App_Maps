package com.vic.project.app_maps.presentation.viewmodelimport androidx.lifecycle.viewModelScopeimport com.vic.project.app_maps.data.model.LatLongimport com.vic.project.app_maps.data.model.LocationDataimport com.vic.project.app_maps.domain.repository.LocationRepositoryimport com.vic.project.app_maps.utils.AppConstantimport com.vic.project.app_maps.utils.JSONimport dagger.hilt.android.lifecycle.HiltViewModelimport jakarta.inject.Injectimport kotlinx.coroutines.flow.distinctUntilChangedByimport kotlinx.coroutines.flow.launchInimport kotlinx.coroutines.flow.onEach@HiltViewModelclass HomeViewModel @Inject constructor(    private val locationRepository: LocationRepository) : BaseViewModel<State, Event>(State()) {    init {        uiState.distinctUntilChangedBy { it.onFocus }.onEach {            if (it.onFocus) {                val list = locationRepository.getListHistory()                updateUiState(uiState.value.copy(listHistory = list))            }        }.launchIn(viewModelScope)    }    override fun handleEvent(event: Event) {        when (event) {            Event.GetLocationCurrent -> {                getLocationCurrent()            }            is Event.SearchLocation -> {                searchAddress(event.data)            }            is Event.UpdateFocus -> {                updateUiState(                    uiState.value.copy(                        onFocus = event.data                    )                )            }            is Event.UpdateSearch -> {                if (event.data.isNotBlank()) {                    getListRecommend(event.data)                    updateUiState(                        uiState.value.copy(                            search = event.data,                        )                    )                } else {                    updateUiState(                        uiState.value.copy(                            search = event.data, listRecommend = emptyList()                        )                    )                }            }            is Event.ChooseLocation -> {                updateUiState(                    uiState.value.copy(                        currentChoose = event.data                    )                )            }            Event.ResetListResult -> {                updateUiState(                    uiState.value.copy(                        listResultSearch = emptyList()                    )                )            }        }    }    private fun searchAddress(data: String) {        async {            updateUiState(                uiState.value.copy(                    search = data,                )            )            locationRepository.searchPlace(data).collectData {                val item =                    JSON.decodeToList(it, Array<LocationData>::class.java).orEmpty()                locationRepository.addHistory(data)                updateUiState(                    uiState.value.copy(                        listResultSearch = item                    )                )            }        }    }    private fun getListRecommend(data: String) {        async {            locationRepository.getPlaceRecommend(data).collectData {                val data = JSON.decodeToList(it, Array<LocationData>::class.java).orEmpty()                    .map { it.description }.take(5)                updateUiState(                    uiState.value.copy(                        listRecommend = data                    )                )            }        }    }    private fun getLocationCurrent() {        async {            locationRepository.getCurrentLocation().collect {                updateUiState(                    uiState.value.copy(                        latLong = it                    )                )            }        }    }}sealed interface Event {    data object GetLocationCurrent : Event    data class UpdateSearch(val data: String) : Event    data class UpdateFocus(val data: Boolean) : Event    data class SearchLocation(val data: String) : Event    data class ChooseLocation(val data: LocationData) : Event    data object ResetListResult : Event}data class State(    val latLong: LatLong = AppConstant.fallbackLocation,    val currentChoose: LocationData? = null,    val search: String = "",    val listHistory: List<String> = emptyList(),    val listRecommend: List<String> = emptyList(),    val listResultSearch: List<LocationData> = emptyList(),    val onFocus: Boolean = false,)