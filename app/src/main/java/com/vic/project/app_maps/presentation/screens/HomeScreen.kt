package com.vic.project.app_maps.presentation.screensimport android.annotation.SuppressLintimport android.app.Activityimport android.content.Contextimport android.content.Intentimport android.location.LocationManagerimport android.net.Uriimport android.provider.Settingsimport androidx.activity.compose.rememberLauncherForActivityResultimport androidx.activity.result.IntentSenderRequestimport androidx.activity.result.contract.ActivityResultContractsimport androidx.compose.animation.AnimatedVisibilityimport androidx.compose.foundation.ExperimentalFoundationApiimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.navigationBarsPaddingimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.layout.statusBarsPaddingimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.Refreshimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.Iconimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.platform.LocalFocusManagerimport androidx.compose.ui.platform.LocalSoftwareKeyboardControllerimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.input.ImeActionimport androidx.compose.ui.text.style.TextOverflowimport androidx.compose.ui.unit.dpimport androidx.hilt.navigation.compose.hiltViewModelimport androidx.lifecycle.Lifecycleimport androidx.lifecycle.compose.LifecycleEventEffectimport androidx.lifecycle.compose.collectAsStateWithLifecycleimport com.google.android.gms.maps.CameraUpdateFactoryimport com.google.android.gms.maps.model.BitmapDescriptorFactoryimport com.google.android.gms.maps.model.JointTypeimport com.google.maps.android.compose.GoogleMapimport com.google.maps.android.compose.MapPropertiesimport com.google.maps.android.compose.MapUiSettingsimport com.google.maps.android.compose.Markerimport com.google.maps.android.compose.MarkerStateimport com.google.maps.android.compose.Polylineimport com.google.maps.android.compose.rememberCameraPositionStateimport com.vic.project.app_maps.Rimport com.vic.project.app_maps.data.model.SheetValueimport com.vic.project.app_maps.presentation.components.InputTextimport com.vic.project.app_maps.presentation.components.bottom_sheet_custom.BottomSheetScaffoldimport com.vic.project.app_maps.presentation.components.bottom_sheet_custom.rememberBottomSheetScaffoldStateimport com.vic.project.app_maps.presentation.components.bottom_sheet_custom.rememberBottomSheetStateimport com.vic.project.app_maps.presentation.permission.LocationPermissionimport com.vic.project.app_maps.presentation.permission.requestBackgroundLocationPermissionimport com.vic.project.app_maps.presentation.theme.Gray_10import com.vic.project.app_maps.presentation.theme.appTypographyimport com.vic.project.app_maps.presentation.theme.primaryMainimport com.vic.project.app_maps.presentation.viewmodel.Eventimport com.vic.project.app_maps.presentation.viewmodel.HomeViewModelimport com.vic.project.app_maps.utils.ContextUtils.hasBackgroundLocationimport com.vic.project.app_maps.utils.ContextUtils.hasForegroundLocationimport com.vic.project.app_maps.utils.GPSHelper.requestGpsEnableimport com.vic.project.app_maps.utils.ModifierExtension.clickOutSideToHideKeyBoardimport com.vic.project.app_maps.utils.ModifierExtension.clickableSingleimport com.vic.project.app_maps.utils.ModifierExtension.shadowCustom@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class)@SuppressLint("UnrememberedMutableState")@Composablefun HomeScreen(    viewModel: HomeViewModel = hiltViewModel()) {    val context = LocalContext.current    val locationManager = context.getSystemService(Context.LOCATION_SERVICE) as LocationManager    val isGpsEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)    val localSoftwareKeyboardController = LocalSoftwareKeyboardController.current    val focusManager = LocalFocusManager.current    val uiState by viewModel.uiState.collectAsStateWithLifecycle()    var requestPermissionSetting by remember {        mutableStateOf(false)    }    val cameraPositionState = rememberCameraPositionState()    LaunchedEffect(uiState.latLong, uiState.currentChoose) {        cameraPositionState.animate(            update = CameraUpdateFactory.newLatLngZoom(                (uiState.currentChoose?.geometry?.location?.convertLatLng()                    ?: uiState.latLong.convertLatLng()), 15f            ), durationMs = 1500        )    }    val enableGpsLauncher = rememberLauncherForActivityResult(        contract = ActivityResultContracts.StartIntentSenderForResult()    ) {        viewModel.handleEvent(Event.GetLocationCurrent)    }    val requestPermission = rememberLauncherForActivityResult(        contract = ActivityResultContracts.RequestPermission()    ) {        // TODO: realtime gps    }    LifecycleEventEffect(Lifecycle.Event.ON_RESUME) {        if (context.hasBackgroundLocation() && requestPermissionSetting) {            // TODO: realtime gps            requestPermissionSetting = false        }    }    LocationPermission {        context.requestGpsEnable(onGpsEnabled = {            viewModel.handleEvent(Event.GetLocationCurrent)        }, onResolvableException = { intentSender ->            enableGpsLauncher.launch(                IntentSenderRequest.Builder(intentSender).build()            )        }, onGpsDisabled = {            viewModel.handleEvent(Event.GetLocationCurrent)        })    }    val sheetState =        rememberBottomSheetState(initialValue = SheetValue.PartiallyExpanded, defineValues = {            SheetValue.Collapsed at offset(percent = 82)            SheetValue.PartiallyExpanded at offset(percent = 45)            SheetValue.Expanded at offset(percent = 5)        }, confirmValueChange = {            true        })    val scaffoldState = rememberBottomSheetScaffoldState(sheetState)    LaunchedEffect(uiState.isLoad) {        if (uiState.isLoad) {            scaffoldState.sheetState.animateTo(SheetValue.Collapsed)        } else {            scaffoldState.sheetState.animateTo(SheetValue.PartiallyExpanded)        }    }    BottomSheetScaffold(        showBottomSheet = uiState.showBottomSheet,        scaffoldState = scaffoldState,        sheetContainerColor = Gray_10,        sheetContent = {            if (uiState.isDirection) {                DirectionLocation(                    iLoad = uiState.isLoad,                    directionDataTW = uiState.directionDataTW,                    directionDataDrive = uiState.directionDataDrive,                    directionDataWalk = uiState.directionDataWalk,                    currentModel = uiState.currentModel,                    onClose = { viewModel.handleEvent(Event.ResetDirection) },                    onChangeModel = { viewModel.handleEvent(Event.ChangeModel(it)) },                    onStart = {                        requestBackgroundLocationPermission(                            activity = context as Activity,                            onRequest = {                                if (context.hasForegroundLocation()) {                                    requestPermission.launch(it)                                } else {                                    val intent =                                        Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {                                            addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)                                            data = Uri.fromParts("package", context.packageName, null)                                        }                                    context.startActivity(intent)                                    requestPermissionSetting = true                                }                            },                            onGranted = {                            },                            onDenied = {                            })                    },                )            } else {                ResultSearchLocation(                    title = uiState.search,                    list = uiState.listResultSearch,                    iLoad = uiState.isLoad,                    onClose = { viewModel.handleEvent(Event.ResetListResult) },                    onDirections = {                        if (isGpsEnabled) {                            viewModel.handleEvent(                                Event.GetDirections(                                    uiState.latLong.convertLatLng(),                                    it.geometry.location.convertLatLng()                                )                            )                        } else {                            viewModel.hideBottomSheet(false)                            viewModel.handleEvent(Event.UpdateDirection(true))                        }                        viewModel.handleEvent(Event.ChooseLocation(it))                    })            }        }) {        Box(            modifier = Modifier                .fillMaxSize()                .clickOutSideToHideKeyBoard()        ) {            GoogleMap(                modifier = Modifier                    .fillMaxSize()                    .navigationBarsPadding(),                uiSettings = MapUiSettings(                    zoomControlsEnabled = false,                    myLocationButtonEnabled = false,                    compassEnabled = false                ),                properties = MapProperties(                    isMyLocationEnabled = isGpsEnabled && context.hasForegroundLocation()                ),                cameraPositionState = cameraPositionState,                onMapClick = {                    localSoftwareKeyboardController?.hide()                    focusManager.clearFocus()                }) {                uiState.currentChoose?.geometry?.location?.let {                    Marker(                        state = MarkerState(position = it.convertLatLng()),                        icon = BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_RED)                    )                }                Polyline(                    points = when (uiState.currentModel) {                        ModelDirection.Driving -> uiState.listDirectionsDrive                        ModelDirection.Walking -> uiState.listDirectionsWalk                        ModelDirection.Two_wheeler -> uiState.listDirectionsTW                    },                    onClick = {},                    color = primaryMain,                    jointType = JointType.ROUND,                    width = 20f,                )            }            SearchLocation(                search = uiState.search,                onFocus = uiState.onFocus,                isGpsEnabled = isGpsEnabled,                isDirection = uiState.isDirection,                startLocation = uiState.startLocation,                currentChoose = uiState.currentChoose,                list = uiState.listResult,                listHistory = uiState.listHistory,                listRecommend = uiState.listRecommend,                onFocusChanged = {                    viewModel.handleEvent(Event.UpdateFocus(it))                },                onValueChange = {                    if (uiState.isDirection){                        viewModel.handleEvent(Event.SearchLocationResult(it))                    } else {                        viewModel.handleEvent(Event.UpdateSearch(it))                    }                },                onSearch = {                    if (uiState.isDirection){                        viewModel.handleEvent(Event.SearchLocationResult(it))                    } else {                        viewModel.handleEvent(Event.SearchLocation(it))                    }                },                onDirections = { start, data ->                    if (isGpsEnabled && start.not()){                        viewModel.handleEvent(Event.ChooseLocation(data))                        viewModel.handleEvent(                            Event.GetDirections(                                uiState.latLong.convertLatLng(),                                data.geometry.location.convertLatLng()                            )                        )                    } else {                        if (start) {                            viewModel.handleEvent(Event.ChooseStartLocation(data))                            if (uiState.currentChoose != null) {                                viewModel.handleEvent(                                    Event.GetDirections(                                        data.geometry.location.convertLatLng(),                                        uiState.currentChoose?.geometry?.location?.convertLatLng()                                    )                                )                            }                        } else {                            viewModel.handleEvent(Event.ChooseLocation(data))                            if (uiState.startLocation != null) {                                viewModel.handleEvent(                                    Event.GetDirections(                                        uiState.startLocation?.geometry?.location?.convertLatLng(),                                        data.geometry.location.convertLatLng()                                    )                                )                            }                        }                    }                }            )        }    }}