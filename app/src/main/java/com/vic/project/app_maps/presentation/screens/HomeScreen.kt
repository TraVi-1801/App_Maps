package com.vic.project.app_maps.presentation.screensimport android.annotation.SuppressLintimport android.content.Contextimport android.location.LocationManagerimport androidx.activity.compose.rememberLauncherForActivityResultimport androidx.activity.result.IntentSenderRequestimport androidx.activity.result.contract.ActivityResultContractsimport androidx.compose.animation.AnimatedVisibilityimport androidx.compose.foundation.ExperimentalFoundationApiimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.navigationBarsPaddingimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.layout.statusBarsPaddingimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.Refreshimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.Iconimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.platform.LocalFocusManagerimport androidx.compose.ui.platform.LocalSoftwareKeyboardControllerimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.input.ImeActionimport androidx.compose.ui.text.style.TextOverflowimport androidx.compose.ui.unit.dpimport androidx.hilt.navigation.compose.hiltViewModelimport androidx.lifecycle.Lifecycleimport androidx.lifecycle.compose.LifecycleEventEffectimport androidx.lifecycle.compose.collectAsStateWithLifecycleimport com.google.android.gms.maps.CameraUpdateFactoryimport com.google.android.gms.maps.model.BitmapDescriptorFactoryimport com.google.maps.android.compose.GoogleMapimport com.google.maps.android.compose.MapPropertiesimport com.google.maps.android.compose.MapUiSettingsimport com.google.maps.android.compose.Markerimport com.google.maps.android.compose.MarkerStateimport com.google.maps.android.compose.rememberCameraPositionStateimport com.vic.project.app_maps.Rimport com.vic.project.app_maps.data.model.SheetValueimport com.vic.project.app_maps.presentation.components.InputTextimport com.vic.project.app_maps.presentation.components.bottom_sheet_custom.BottomSheetScaffoldimport com.vic.project.app_maps.presentation.components.bottom_sheet_custom.rememberBottomSheetScaffoldStateimport com.vic.project.app_maps.presentation.components.bottom_sheet_custom.rememberBottomSheetStateimport com.vic.project.app_maps.presentation.permission.LocationPermissionimport com.vic.project.app_maps.presentation.theme.Gray_10import com.vic.project.app_maps.presentation.theme.appTypographyimport com.vic.project.app_maps.presentation.viewmodel.Eventimport com.vic.project.app_maps.presentation.viewmodel.HomeViewModelimport com.vic.project.app_maps.utils.ContextUtils.hasBackgroundLocationimport com.vic.project.app_maps.utils.ContextUtils.hasForegroundLocationimport com.vic.project.app_maps.utils.GPSHelper.requestGpsEnableimport com.vic.project.app_maps.utils.ModifierExtension.clickOutSideToHideKeyBoardimport com.vic.project.app_maps.utils.ModifierExtension.clickableSingleimport com.vic.project.app_maps.utils.ModifierExtension.shadowCustom@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class)@SuppressLint("UnrememberedMutableState")@Composablefun HomeScreen(    viewModel: HomeViewModel = hiltViewModel()) {    val context = LocalContext.current    val locationManager = context.getSystemService(Context.LOCATION_SERVICE) as LocationManager    val isGpsEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)    val localSoftwareKeyboardController = LocalSoftwareKeyboardController.current    val focusManager = LocalFocusManager.current    val uiState by viewModel.uiState.collectAsStateWithLifecycle()    var requestPermissionSetting by remember {        mutableStateOf(false)    }    val cameraPositionState = rememberCameraPositionState()    LaunchedEffect(uiState.latLong, uiState.currentChoose) {        cameraPositionState.animate(            update = CameraUpdateFactory.newLatLngZoom(                (uiState.currentChoose?.geometry?.location?.convertLatLng() ?: uiState.latLong.convertLatLng()), 15f            ), durationMs = 1500        )    }    val enableGpsLauncher = rememberLauncherForActivityResult(        contract = ActivityResultContracts.StartIntentSenderForResult()    ) {        viewModel.handleEvent(Event.GetLocationCurrent)    }    val requestPermission = rememberLauncherForActivityResult(        contract = ActivityResultContracts.RequestPermission()    ) {        // TODO: realtime gps    }    LifecycleEventEffect(Lifecycle.Event.ON_RESUME) {        if (context.hasBackgroundLocation() && requestPermissionSetting) {            // TODO: realtime gps            requestPermissionSetting = false        }    }    LocationPermission {        context.requestGpsEnable(onGpsEnabled = {            viewModel.handleEvent(Event.GetLocationCurrent)        }, onResolvableException = { intentSender ->            enableGpsLauncher.launch(                IntentSenderRequest.Builder(intentSender).build()            )        }, onGpsDisabled = {            viewModel.handleEvent(Event.GetLocationCurrent)        })    }    val sheetState = rememberBottomSheetState(        initialValue = SheetValue.PartiallyExpanded,        defineValues = {            SheetValue.Collapsed at height(120.dp)            SheetValue.PartiallyExpanded at offset(percent = 45)            SheetValue.Expanded at offset(percent = 5)        },        confirmValueChange = {            true        }    )    val scaffoldState = rememberBottomSheetScaffoldState(sheetState)    BottomSheetScaffold(        showBottomSheet = uiState.listResultSearch.isNotEmpty(),        scaffoldState = scaffoldState,        sheetContainerColor = Gray_10,        sheetContent = {            ResultSearchLocation(                title = uiState.search,                list = uiState.listResultSearch,                onItemClick = {},                onClose = {viewModel.handleEvent(Event.ResetListResult)},                onStart = {},                onDirections = {}            )        }    ){        Box(            modifier = Modifier                .fillMaxSize()                .clickOutSideToHideKeyBoard()        ) {            GoogleMap(                modifier = Modifier                    .fillMaxSize()                    .navigationBarsPadding(), uiSettings = MapUiSettings(                    zoomControlsEnabled = false, myLocationButtonEnabled = false, compassEnabled = false                ), properties = MapProperties(                    isMyLocationEnabled = isGpsEnabled && context.hasForegroundLocation()                ), cameraPositionState = cameraPositionState, onMapClick = {                    localSoftwareKeyboardController?.hide()                    focusManager.clearFocus()                }) {                uiState.currentChoose?.geometry?.location?.let {                    Marker(                        state = MarkerState(position = it.convertLatLng()),                        icon = BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_RED)                    )                }            }            Column(                modifier = Modifier                    .fillMaxWidth()                    .statusBarsPadding()                    .padding(top = 20.dp, start = 16.dp, end = 16.dp),                verticalArrangement = Arrangement.spacedBy(12.dp)            ) {                InputText(                    string = uiState.search,                    textHint = "Enter location...",                    imgTrailing = R.drawable.ic_search,                    imeAction = ImeAction.Search,                    onSearch = { viewModel.handleEvent(Event.SearchLocation(uiState.search)) },                    onFocusChanged = {                        viewModel.handleEvent(Event.UpdateFocus(it.hasFocus))                    },                    onValueChange = {                        viewModel.handleEvent(Event.UpdateSearch(it))                    })                AnimatedVisibility(                    visible = uiState.onFocus && (uiState.listHistory.isNotEmpty() || uiState.listRecommend.isNotEmpty()),                    modifier = Modifier.fillMaxWidth()                ) {                    Column(                        modifier = Modifier                            .fillMaxWidth()                            .shadowCustom(                                color = MaterialTheme.colorScheme.onSurface.copy(0.3f),                                offsetY = 0.dp,                                offsetX = 3.dp,                                spread = 0.dp,                                blurRadius = 4.dp,                                borderRadius = 8.dp                            )                            .background(Gray_10, RoundedCornerShape(8.dp))                            .padding(8.dp),                    ) {                        Row(                            modifier = Modifier                                .padding(bottom = 8.dp)                                .fillMaxWidth(),                            horizontalArrangement = Arrangement.spacedBy(4.dp),                            verticalAlignment = Alignment.CenterVertically                        ) {                            Text(                                text = if (uiState.listRecommend.isNotEmpty()) "Search recommend" else "Search history",                                style = appTypography.labelMedium,                                fontWeight = FontWeight.W500,                                color = MaterialTheme.colorScheme.onSurfaceVariant,                            )                            if (uiState.listRecommend.isEmpty()) {                                Icon(                                    imageVector = Icons.Default.Refresh,                                    contentDescription = "",                                    tint = MaterialTheme.colorScheme.onSurfaceVariant,                                    modifier = Modifier.size(18.dp)                                )                            }                        }                        uiState.listRecommend.ifEmpty { uiState.listHistory }.forEach {                            Text(                                text = it,                                style = MaterialTheme.typography.bodySmall,                                fontWeight = FontWeight.W500,                                maxLines = 1,                                overflow = TextOverflow.Clip,                                modifier = Modifier                                    .fillMaxWidth()                                    .clickableSingle {                                        viewModel.handleEvent(Event.SearchLocation(it))                                    }                                    .padding(vertical = 6.dp))                        }                    }                }            }        }    }}//requestBackgroundLocationPermission(//activity = context as Activity,//onRequest = {//    if (context.hasForegroundLocation()) {//        requestPermission.launch(it)//    } else {//        val intent =//            Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {//                addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)//                data = Uri.fromParts("package", context.packageName, null)//            }//        context.startActivity(intent)//        requestPermissionSetting = true//    }//},//onGranted = {////},//onDenied = {////})